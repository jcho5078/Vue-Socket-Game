#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socket-server:server');
var http = require('http');
const dotenv = require('dotenv');
dotenv.config();

const {Server} = require("socket.io");

const { Kafka } = require('kafkajs')

const kafka = new Kafka({
  clientId: 'socket',
  brokers: ['localhost:29092'],
})

const producer = kafka.producer()

const run = async (param) => {
  // Producing
  await producer.connect()

  await producer.send({
    topic: 'game',
    messages: [
      {
        value: param,
      },
    ],
  })
  console.log("writes: ", param);
}
run('nothing').catch(console.error)

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort('3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server, {
  cors: {
    origin: '*'
  },
  allowEIO3: true,
});

server.listen(3000, '0.0.0.0');
var players = {};
var bullets = {};

/**
 * logic
 */
io.on('connection', socket => {

  /**
   * chat
   */
  socket.on('chat', message => {
    console.log(message);
    io.emit('chat', message);
  });

  let gameTempData = '';

  /**
   * game
   */
  socket.on('gameUpdate', data => {
    /**{
      "socketId" : socket.id,
      "userName": null,
      "userNo": null,
      "shipX": null,
      "shipY": null,
      "shipRotation": null,
      "userNameX": null,
      "userNameY": null,
    }*/
    if(players[socket.id] != null){
      players[socket.id].userName = data.userName;
      players[socket.id].userNo = data.userNo;
      players[socket.id].shipX = data.shipX;
      players[socket.id].shipY = data.shipY;
      players[socket.id].shipRotation = data.shipRotation;
      players[socket.id].userNameX = data.userNameX;
      players[socket.id].userNameY = data.userNameY;
      players[socket.id].socketId = socket.id;

      socket.broadcast.emit('gameUpdated', players[socket.id]);
    }
  });

  socket.on('bulletUpdate', data => {
    /**{
        "userNo" : userNo,
        "angle": angle,
        "x": x,
        "y": y,
    }*/
    console.log('bullet : ' + JSON.stringify(data));
    socket.broadcast.emit('bulletUpdated', data);
  });

  socket.on('gameConn', data => {
    data.socketId = socket.id;
    players[socket.id] = data;
    console.log('gameConn : ' + JSON.stringify(data) + ' - players : ' + JSON.stringify(players));

    socket.emit('currentPlayers', players); // load current users
    socket.broadcast.emit('newPlayer', players[socket.id]); // submit login sign to other player
  });

  socket.on('hitByBullet', function(data) {
    /**
     hitData = {
        "bulletUserNo" : objB.userNo,
        "shipUserNo" : objA.userNo,
      };
     */
    let bulletUserNo = data.bulletUserNo;
    let shipUserNo = data.shipUserNo;
    Object.keys(players).forEach(function(socketId) {
      if(players[socketId].userNo == bulletUserNo){
        console.log('bullet Master : ' + JSON.stringify(players[socketId]));
        // 이벤트 전달
        let eventData = {
          bulletUserNo: bulletUserNo,
          shipUserNo: shipUserNo
        }
        run(JSON.stringify(eventData)).catch(console.error)
      }
    });
    Object.keys(players).forEach(function(socketId) {
      if(players[socketId].userNo == shipUserNo){
        console.log('hitByBullet : ' + JSON.stringify(players[socketId]));
        socket.broadcast.emit('hitUpdate', players[socketId]);
        players[socketId] = null;
        delete players[socketId];
      }
    });
  });

  socket.on('disconnect', function () {
    var data = players[socket.id];
    console.log('player [' + socket.id +'] disconnected : ' + JSON.stringify(data));
    if(data != null) {
      console.log('disconnected1 : ' + JSON.stringify(players));
      players[socket.id] = null;
      console.log('disconnected2 : ' + JSON.stringify(players));
      io.emit('playerDisconnected', data.userNo);
    }
    delete players[socket.id];
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
