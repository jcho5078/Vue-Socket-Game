#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socket-server:server');
var http = require('http');
const {Server} = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server, {
  cors: {
    origin: '*'
  },
  allowEIO3: true,
});

server.listen(port);
var players = new Array();
var bullets = new Array();

/**
 * logic
 */
io.on('connection', socket => {
  console.log(socket.nsp.sockets);

  /**
   * chat
   */
  socket.on('chat', message => {
    console.log(message);
    io.emit('chat', message);
  });

  let gameTempData = '';

  /**
   * game
   */
  socket.on('gameUpdate', data => {
    /**{
      "userName": null,
      "userNo": null,
      "state": update, bullet, conn,
      "shipX": null,
      "shipY": null,
      "shipRotation": null,
      "userNameX": null,
      "userNameY": null,
    }*/

    if(players.length < 1 || players[data.userNo] == null){
      console.log('conn : ' + JSON.stringify(data));
      players[data.userNo] = data;
      socket.emit('currentPlayers', players);
    }else{
      //console.log('update : ' + JSON.stringify(data));
      players[data.userNo].userName = data.userName;
      players[data.userNo].userNo = data.userNo;
      players[data.userNo].shipX = data.shipX;
      players[data.userNo].shipY = data.shipY;
      players[data.userNo].shipRotation = data.shipRotation;
      players[data.userNo].userNameX = data.userNameX;
      players[data.userNo].userNameY = data.userNameY;

      io.emit('gameUpdated', players[data.userNo]);
    }
  });

  socket.on('bulletUpdate', data => {
    /*{
        "userNo" : userNo,
        "state": /!* create, die *!/
        "angle": angle,
        "x": x,
        "y": y,
    }*/
    /*console.log('bullet : ' + JSON.stringify(data));
    if(data != null && data.state == 'die'){
      bullets[data.userNo] = null;
    }else{
      bullets[data.userNo] = data;
    }
    console.log('bullets : ' + JSON.stringify(bullets));
    io.emit('bulletUpdated', bullets);*/

    console.log('bullets : ' + JSON.stringify(data));
    io.emit('bulletUpdated', data);

  });

  socket.on('gameConn', data => {
    players[data.userNo] = data;
    console.log('gameConn : ' + JSON.stringify(data));
    socket.emit('currentPlayers', players);
  });

  socket.on('disconn', function (userNo) {
    console.log('player [' + socket.id + '-'+userNo + '] disconnected');
    delete players[userNo];
    io.emit('playerDisconnected', userNo);
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
